<!--ChatGPT prompt: write html code using bootstrap to make a table with these columns: rank (number), name, best player, and number of battles won
(edited to be dynamically loaded with handlebars, and sylistic choices)-->
<div class="container mt-4">
    <h2 class="text-center mb-4">Leaderboard</h2>

    <!-- Sort Dropdown -->
    <div class="d-flex justify-content-end mb-2">
        <label for="sortDropdown" class="me-2">Sort by:</label>
        <select id="sortDropdown" class="form-select w-auto" onchange="handleSortChange()">
            <option value="">Select</option>
            <option value="0_num_asc">Rank (Low to High)</option>
            <option value="0_num_desc">Rank (High to Low)</option>
            <option value="1_str_asc">Name (A to Z)</option>
            <option value="1_str_desc">Name (Z to A)</option>
            <option value="4_num_desc">Best Player (High to Low)</option>
            <option value="4_num_asc">Best Player (Low to High)</option>
        </select>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-info">
                <tr>
                    <th scope="col">Rank</th>
                    <th scope="col">Name</th>
                    <th scope="col">Best Player</th>
                    <th scope="col">Battles Won</th>
                </tr>
            </thead>
            <tbody>
                {{!-- start loop --}}
                {{#each leaders}}
                <tr>
                    <td>{{rank}}</td>
                    <td>{{name}}</td>
                    <td>{{best_player}}</td>
                    <td>{{battles_won}}</td>
                    <td>{{best_player_rank}}</td>
                </tr>
                {{/each}}
                {{!-- end loop --}}
            </tbody>
        </table>
    </div>
</div>


<!-- ChatGPT prompt: using the above code, write a script to make the sorting for this table (in an hbs file) work -->

<script>
function handleSortChange() {
    const dropdown = document.getElementById("sortDropdown");
    let value = dropdown.value;
    console.log(value);
    if (!value) return;
    

    const [colIndex, type, direction] = value.split('_');
    const tableBody = document.querySelector("table tbody");
    const rows = Array.from(tableBody.querySelectorAll("tr"));

    const getCellValue = (row, index) => {
        const cell = row.children[index];
        return cell ? cell.textContent.trim() : '';
    };

    rows.sort((a, b) => {
        let valA = getCellValue(a, parseInt(colIndex));
        let valB = getCellValue(b, parseInt(colIndex));

        if (type === 'num') {
            valA = parseFloat(valA) || 0;
            valB = parseFloat(valB) || 0;
        } else {
            valA = valA.toLowerCase();
            valB = valB.toLowerCase();
        }

        if (valA < valB) return direction === 'asc' ? -1 : 1;
        if (valA > valB) return direction === 'asc' ? 1 : -1;
        return 0;
    });

    tableBody.innerHTML = '';
    rows.forEach(row => tableBody.appendChild(row));
}
</script>
